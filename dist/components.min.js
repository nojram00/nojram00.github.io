window.carousels={};class Carousel extends HTMLElement{constructor(){super(),this.styleEl=document.createElement("style"),this.styleEl.innerHTML="\n            :host{\n                width: 100%;\n                height: 100% ;\n                background-color: #191919;\n                position: absolute !important;\n            }\n\n            ::slotted(*) {\n                background-color: white;\n                position: absolute !important;\n                height: 100%;\n                width: 100%;\n                opacity: 0;\n                inset: 0;\n                padding: 0;\n                z-index: 10;\n                overflow: hidden;\n                transition: .5s all ease-in-out;\n            }\n\n            ::slotted([data-active]) {\n                opacity: 1;\n            }\n        ",this.shadow=this.attachShadow({mode:"open"}),this.slotElement=document.createElement("slot")}connectedCallback(){if(this.shadow.appendChild(this.styleEl),this.shadow.appendChild(this.slotElement),window.carousel?window.carousel&&this.dataset.forceOverwrite?window.carousel=this:console.warn("More than 1 carousel element has been detected. The window.carousel has been to assigned to the first carousel element detected. \nTo assign this element make sure to add 'data-force-overwrite' attribute to this element.\nOr assign via adding a 'data-label' attribute and access it via window.carousels."):window.carousel=this,this.dataset.label){if(this.dataset["force-overwrite"])return void console.error("Cannot assign a label to a carousel element when 'data-force-overwrite' is present. Please remove 'data-force-overwrite' to assign a label.");window.carousels[this.dataset.label]=this}}disconnectedCallback(){window.carousel=null}static get instance(){return window.carousel}static getInstance(e){return window.carousels[e]}static get instances(){return window.carousels}next(){let e=this.querySelector("[data-active]");var t=Array.from(this.children).indexOf(e)+1,n=this.children[t>this.children.length-1?0:t];delete e.dataset.active,n.dataset.active=""}prev(){let e=this.querySelector("[data-active]");var t=Array.from(this.children).indexOf(e)-1,n=this.children[t<0?this.children.length-1:t];delete e.dataset.active,n.dataset.active=""}}class Sidebar extends HTMLElement{static _instance=null;constructor(){super();const e=this.attachShadow({mode:"closed"}),t=document.createElement("style");t.textContent="\n            :host {\n              position: fixed;\n              top: 0;\n              left: -240px;\n              width: 240px;\n              height: 100%;\n              background: white;\n              transition: left 0.3s ease;\n              box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n              display: block;\n            }\n  \n            :host([open]), :host([partial][open]) {\n              left: 0;\n            }\n  \n            :host([partial]){\n              left: -160px;\n            }\n          ",e.appendChild(t),e.appendChild(document.createElement("slot")),window.sidebar||(window.sidebar=this)}static get instance(){return window.sidebar}open(){this.setAttribute("open","")}close(){this.removeAttribute("open")}toggle(){this.toggleAttribute("open")}}class Preloader extends HTMLElement{constructor(){super(),window.preloader||(window.preloader=this)}disconnectedCallback(){window.preloader=null}setLoadingPage(e){this.loadingPage=e}setFallbackPage(e){this.fallbackPage=e}load(e,t={}){this.innerHTML=this.loadingPage??"",fetch(e,t).then(e=>e.text()).then(e=>{this.innerHTML=e}).catch(e=>{console.error(e),this.innerHTML=this.fallbackPage??""})}}class PopOver extends HTMLElement{constructor(){super(),this.styleEl=document.createElement("style"),this.styleEl.innerHTML="\n        :host{\n            position: relative;\n            min-width: 240px !important;\n            height: auto;\n        }\n        ::slotted([data-toggle]){\n            anchor-name: --anchor;\n            width: fit-content;\n        }\n        ::slotted([data-content]){\n            margin-top: 10px;\n            padding: 5px;\n            border-radius: 5px;\n            min-width: 80px;\n            min-height: 200px;\n            background-color: aqua;\n            position: absolute;\n            position-anchor: --anchor;\n            box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);\n\n            transform: scale(0);\n            transform-origin: left top;\n            transition: transform .5s ease-in-out;\n        }\n        ::slotted([data-content][open]){\n            transform: scale(1);\n        }\n    ",this.shadow=this.attachShadow({mode:"open"})}connectedCallback(){this.shadow.appendChild(this.styleEl),this.shadow.appendChild(document.createElement("slot")),requestAnimationFrame(()=>this.initContent())}initContent(){const e=this._find("toggle"),t=this._find("content");e.addEventListener("click",()=>{t.toggleAttribute("open")})}_find(e){return Array.from(this.children).filter(t=>null!=t.dataset[e])[0]}}customElements.define("html-sidebar",Sidebar),customElements.define("html-carousel",Carousel),customElements.define("html-preloader",Preloader),customElements.define("html-popover",PopOver);